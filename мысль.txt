1. Компонент QueryBuilder

Определю чем он будет заниаться!
     какие запросы будет отправлять в базу данных
      запросы будут такие:

	1 getAll - выводит всех,
	2 getOne - вывести одного,
	3 get - выводим одну или несколько записей,
	4 insert, create  - добавить
	5 update - Изменить
	6 delete - Удалить

Прописали все функции началось дублирование везде мы подключаемся к базе. создаем новый компонент connection
компонент будет прост у него будет один статический метод  подключение к базе данных.
назовем функцию make и положем в аргументы $config
создаем config.php и положим туда массив подключение к базе данных.
Все это мы делаем для удобочитаемого кода что бы легко было редактировать читать

Подключение к базе данных сделаем отдельно назовем ее как start.php
создадим переменную и вызовим $config так же вызовим QueryBuilder и Connection и возвратим new QueryBuilder(положим туда
статический метод make($config);

3. Компонент Router

Понравился,  больше для безопасности чтобы любой пользователь не смог перейти куда ему не нужно.
Чтобы начать работать с роутерем мы создадим public и сделаем его корнем проекта, закинем туда index.php и .htaccess
Теперь преступим к роутеру так же создадим функуию статик и назовем его page(помести $config
создадим переменную как $parsed_url = parse_url($_SERVER['']
Теперь я хочу что бы роутер перенаправлял по "/"
"/" => view/page.php
Для этого мы заходим в config.php и начинаем прописывать массив "router" => [
];
Опять же легко его редактировать и читать

4. Компонент Flash

Flash сообщение нужны чтобы когда мы меняли,изменяли, удоляли, добовляли нам выходило сообщение
и это должно работать у нас через session.



5. Компонент Validation и Input

один и самых интересных компонентов это Validation и Input
Они будут отвечать за валидацию

создаем класс Input  создаем статическую функцию первую называем как exists а вторую get

exists проверяет пустой ли  глобальный массив $_POST если путой то возвращает true
а если не пустой то false
так же с get либо true : false

функция get передаем значение имени username
так же мы принимаем есть у нас или нет

Так же у нас в switch будут 6 правил
1. required должно быть заполнено
2. min должно быть короче
3. max  должно быть длиние
4. matches  данные должны совпадать
5. unique  должна быть уникальна
6. email   должны соответствовать формату email



фкусная функция check оно принимет два параметра что чекать и второе на что чекать
Начинаею чекать глобольный массив $_POST и ] в массиве передаю "username" =>[

required => true обезателен для заполнения
'min' => 2,
'max' => 30,
'unique' => 'users' уникальный
];

Зададим классу свойства: passed - булевское значение об успешном прохождении валидации.

Напишем несколько простых методов:
errors()  возвращающий список ошибок валидации
passed() возвращающий успешность прохождения валидации
addError будет добавлять новую запись в массив ошибок. Сделаем его приватным, поскольку он нужен только
для работы публичных методов и не является частью интерфейса класса
Основную работу выполняет метод check, он будет принимать в качестве аргументов массив,
где хранятся данные из отправленной формы
